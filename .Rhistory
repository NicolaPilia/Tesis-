corp
View(corp_c$dmeta)
View(corp_c$content)
corp_c$content<- str_replace_all(corp_c$content, "(\\b\\w)", 'C_\\1')
View(corp_c$content)
corp_p$content<- str_replace_all(corp_p$content, "(\\b\\w)", 'p_\\1')
corp<-corp_c
corp$content<-paste(corp_c$content,corp_p$content)
corp$content
View(corp$content)
corp_p$content<- str_replace_all(corp_p$content, "(\\b\\w)", 'P_\\1')
corp$content<-paste(corp_c$content,corp_p$content)
View(corp$content)
tdm<-TermDocumentMatrix(corp)
library(tm)
tdm<-TermDocumentMatrix(corp)
tdidf<- weightTfIdf(tdm)
tfidf<- weightTfIdf(tdm)
library(lsa)
lsa.tfidf<-lsa(tfidf,dim=20)
words.df<-as.data.frame(as.matrix(lsa.tfidf$dk))
View(words.df)
#Implementing the logistic regression model
#aggiungo una colonna e rendo binaria la variabile overall rating
data$over.b<-0
data$over.b<-ifelse(data$overall.ratings>3.5,1,0)
summary(data$over.b)
inspect(tfidf)
#Converting foreign characters into english and dropping french rows
library(gsubfn)
#creating Corpus
library(tm)
inspect(tfidf)
inspect(tfidf$dimnames$Terms)
View(tfidf$dimnames$Terms)
corp_p
inspect(corp_p)
corp_p$content<- str_replace_all(corp_p$content, "p_", "")
library(readr)
corp_p$content<- str_replace_all(corp_p$content, "p_", "")
library(stringr)
corp_p$content<- str_replace_all(corp_p$content, "p_", "")
View(corp_p$content)
#Viewing complete dataset
View(data)
corp$content<-paste(corp_c$content,corp_p$content)
View(corp$content)
tdm<-TermDocumentMatrix(corp)
tfidf<- weightTfIdf(tdm)
View(tfidf$dimnames$Terms)
library(lsa)
lsa.tfidf<-lsa(tfidf,dim=20)
words.df<-as.data.frame(as.matrix(lsa.tfidf$dk))
summary(data$over.b)
View(corp$content)
View(words.df)
#Viewing complete dataset
View(data)
#str(data)
data<-data[-c(809,810)]
View(data)
#str(data)
data<-data[-c(809,810),]
#sample 60% training data
training<-sample(c(1:810), 0.6*810)
training
#run logistic model on training
trainData = cbind(label=data$over.b[training],words.df[training,])
reg<-glm(label ~.,data=trainData, family='binomial')
summary(reg)
#compute accuracy on validation set
ValidData<-cbind(label=data$over.b[-training],words.df[-training,])
pred<-predict(reg,newdata=ValidData,type='response')
#confusion matrix
library(caret)
pred
ValidData
pred_factor <- factor(ifelse(pred>0.5,1,0), levels = 1:323)
pred_vector<-as.vector(pred_factor)
pred_vector[is.na(pred_vector)] <- 0
pred_factor<-as.factor(pred_vector)
over.b_factor<-factor(data$over.b[-training], levels = 1:324)
over.b_vector<-as.vector(over.b_factor)
over.b_vector[is.na(over.b_vector)] <- 0
over.b_factor<-as.factor(over.b_vector)
confusionMatrix(pred_factor, over.b_factor)
#creating lift chart
#install.packages("gains")
library(gains)
pred_num<-as.numeric(pred)
over.b_num<- as.numeric(as.character(over.b_factor))
gain<-gains(over.b_num,pred_num, groups=10)
barplot(gain$mean.resp/mean(over.b_num), names.arg = gain$depth, xlab="Percentile", ylab= "Mean Response", main="Decile-wise lift chart")
##Correct K-Fold with right measure
library(caret)
library(MLmetrics)
#Creating dataset for K-fold and making adjustments for training the model
K_Fold_Data<-cbind(output=data$over.b,words.df)
View(K_Fold_Data)
K_Fold_Data$output<-as.factor(K_Fold_Data$output)
K_Fold_Data$output<-make.names(K_Fold_Data$output)
#Creating the list for the output metrix
MySummary  <- function(data, lev = NULL, model = NULL){
a1 <- defaultSummary(data, lev, model)
b1 <- twoClassSummary(data, lev, model)
c1 <- prSummary(data, lev, model)
out <- c(a1, b1, c1)
out}
#Implementing CV
ctrl <- trainControl(method = "cv",number = 10,savePredictions = TRUE, summaryFunction = MySummary,classProbs = TRUE)
#traing the model and looking at the results.
mod_fit <- train(output~.,data =K_Fold_Data,method = "glm",trControl = ctrl)
mod_fit$results
tfidf_2<-tfidf
k-fold_LSA<-function(x,y){
lsa.x<-lsa(tfidf,dim=y)
}
k-fold_LSA<-function(x,y){
lsa.x<-lsa(tfidf_2,dim=y)
}
kfold_LSA<-function(x,y){
lsa.x<-lsa(tfidf_2,dim=y)
}
kfold_LSA<-function(y){
lsa.y<-lsa(tfidf_2,dim=y)
}
kfold_LSA(5)
lsa_5<-kfold_LSA(5)
words.df_5<-as.data.frame(as.matrix(lsa_5$dk))
View(words.df_5)
kfold_LSA<-function(y){
lsa<-lsa(tfidf_2,dim=y)
words.df_5<-as.data.frame(as.matrix(lsa$dk))
K_Fold_Data<-cbind(output=data$over.b,words.df)
K_Fold_Data$output<-as.factor(K_Fold_Data$output)
K_Fold_Data$output<-make.names(K_Fold_Data$output)
#traing the model and looking at the results.
mod_fit <- train(output~.,data =K_Fold_Data,method = "glm",trControl = ctrl)
print(mod_fit$results)
}
kfold_LSA(5)
View(mod_fit$results)
Lsa_results_vector<-1:20
View(mod_fit$results)
mod_fit$results[0]
View(mod_fit$results[0])
mod_fit$results[0,]
mod_fit$results[1,]
DF <- data.frame(num=rep(NA, 22), txt=rep("", N),stringsAsFactors=FALSE)
DF <- data.frame(num=rep(NA, 22), txt=rep("", 22),stringsAsFactors=FALSE)
View(DF)
df<-NULL
df
Kfold_6<-kfold_LSA(6)
df[6,]<-Kfold_i$results[1,]
df[6,]<-Kfold_6$results[1,]
View(df)
df<-data.frame()
df[6,]<-Kfold_6$results[1,]
View(df)
mod_fit$metric
mod_fit$metric[0,]
rbind(mod_fit$metric,0)
ls(mod_fit)
ls(mod_fit$results)
df<-data.frame( "Accuracy","AccuracySD","AUC")
View(df)
df<-data.frame( "Accuracy","AccuracySD","AUC")
View(df)
df<-data.frame(matrix(nrow=22 ncol=20))
df<-data.frame(matrix(nrow=22 ncol=20))
df<-data.frame(matrix(nrow=22, ncol=20))
df
Kfold_6<-kfold_LSA(6)
df[6,]<-Kfold_6$results[1,]
View(df)
df[6,]<-Kfold_6$results[1,]
rbind(df,6)<-Kfold_6$results[1,]
require(rbind)
rbind(df,6)<-Kfold_6$results[1,]
install.packages("plyr")
install.packages("plyr")
rbind(df,6)<-Kfold_6$results[1,]
library(plyr)
K_fold_6<-Kfold_6$results[1,]
K_fold_6
K_fold_6<-Kfold_6$results[1,]
K_fold_6
Kfold_6$results[1,]
Kfold_6$results[1,3]
Kfold_6$results
Kfold_6<-kfold_LSA(6)
kfold_LSA<-function(y){
lsa<-lsa(tfidf_2,dim=y)
words.df_5<-as.data.frame(as.matrix(lsa$dk))
K_Fold_Data<-cbind(output=data$over.b,words.df)
K_Fold_Data$output<-as.factor(K_Fold_Data$output)
K_Fold_Data$output<-make.names(K_Fold_Data$output)
#traing the model and looking at the results.
mod_fit <- train(output~.,data =K_Fold_Data,method = "glm",trControl = ctrl)
print(mod_fit$results)
}
Kfold_6<-kfold_LSA(6)
library(lsa)
Kfold_6<-kfold_LSA(6)
kfold_LSA<-function(y){
lsa<-lsa(tfidf_2,dim=y)
words.df_5<-as.data.frame(as.matrix(lsa$dk))
K_Fold_Data<-cbind(output=data$over.b,words.df)
K_Fold_Data$output<-as.factor(K_Fold_Data$output)
K_Fold_Data$output<-make.names(K_Fold_Data$output)
#traing the model and looking at the results.
mod_fit <- train(output~.,data =K_Fold_Data,method = "glm",trControl = ctrl)
print(mod_fit$results)
}
Kfold_6<-kfold_LSA(6)
kfold_LSA(5)
library(lsa)
kfold_LSA<-function(y){
lsa<-lsa(tfidf_2,dim=y)
words.df_5<-as.data.frame(as.matrix(lsa$dk))
K_Fold_Data<-cbind(output=data$over.b,words.df)
K_Fold_Data$output<-as.factor(K_Fold_Data$output)
K_Fold_Data$output<-make.names(K_Fold_Data$output)
#traing the model and looking at the results.
mod_fit <- train(output~.,data =K_Fold_Data,method = "glm",trControl = ctrl)
print(mod_fit$results)
}
Kfold_6<-kfold_LSA(6)
Kfold_6<-kfold_LSA(6)
kfold_LSA<-function(y){
lsa<-lsa(tfidf_2,dim=y)
words.df_5<-as.data.frame(as.matrix(lsa$dk))
K_Fold_Data<-cbind(output=data$over.b,words.df)
K_Fold_Data$output<-as.factor(K_Fold_Data$output)
K_Fold_Data$output<-make.names(K_Fold_Data$output)
#traing the model and looking at the results.
mod_fit <- train(output~.,data =K_Fold_Data,method = "glm",trControl = ctrl)
print(mod_fit$results)
}
Kfold_6<-kfold_LSA(6)
#creating Corpus
library(tm)
Kfold_6<-kfold_LSA(6)
#confusion matrix
library(caret)
Kfold_6<-kfold_LSA(6)
Kfold_6
View(Kfold_6)
df[6]<-Kfold_6
View(df)
df[6,]<-Kfold_6
df<-data.frame(matrix(nrow=22, ncol=20))
K_fold_df<-
for(i in 1:20){
Kfold_i<-kfold_LSA(i)
df[i,]<-Kfold_i
View(df)
}
View(df)
colnames(mod_fit$results)
names(df)
names(df)<-colnames(mod_fit$results)
lsa.tfidf_3<-lsa(tfidf,dim=1)
words.df_c<-as.data.frame(as.matrix(lsa.tfidf_c$dk))
words.df_p<-as.data.frame(as.matrix(lsa.tfidf_p$dk))
words.df_3<-as.data.frame(as.matrix(lsa.tfidf_3$dk))
View(words.df_3)
lsa.tfidf_3<-lsa(tfidf,dim=0)
words.df_3<-as.data.frame(as.matrix(lsa.tfidf_3$dk))
View(words.df_3)
lsa.tfidf_4<-lsa(tfidf,dim=5)
words.df_4<-as.data.frame(as.matrix(lsa.tfidf_4$dk))
View(words.df_4)
View(words.df)
View(words.df_4)
View(K_Fold_Data)
mod_fit_2<- train(output~V1,data =K_Fold_Data,method = "glm",trControl = ctrl)
mod_fit_2$results
mod_fit_2<- train(output~c(V1,V2),data =K_Fold_Data,method = "glm",trControl = ctrl)
mod_fit_2<- train(output~V1+V2,data =K_Fold_Data,method = "glm",trControl = ctrl)
mod_fit_2$results
mod_fit_2<- train(output~V1+V2+V3,data =K_Fold_Data,method = "glm",trControl = ctrl)
mod_fit_2$results
mod_fit_2<- train(output~.,data =K_Fold_Data,method = "glm",trControl = ctrl)
mod_fit_2$results
mod_fit_2<- train(output~V1+V2+V3+V4+V5+V6+V7,data =K_Fold_Data,method = "glm",trControl = ctrl)
mod_fit_2$results
mod_fit_2<- train(output~V1+V2+V3+V4+V5,data =K_Fold_Data,method = "glm",trControl = ctrl)
mod_fit_2$results
mod_fit_2<- train(output~V1+V2+V3,data =K_Fold_Data,method = "glm",trControl = ctrl)
mod_fit_2$results
mod_fit_2<- train(output~V1+V2+V3+V4,data =K_Fold_Data,method = "glm",trControl = ctrl)
mod_fit_2$results
View(words.df_3)
#creating lift chart
#install.packages("gains")
library(gains)
#confusion matrix
library(caret)
library(lsa)
library(stringr)
#creating Corpus
library(tm)
#Converting foreign characters into english and dropping french rows
library(gsubfn)
mod_fit <- train(output~(K_Fold_Data %>% select(1, 3)),data =K_Fold_Data,method = "glm",trControl = ctrl)
library(tidyverse)
mod_fit <- train(output~(K_Fold_Data %>% select(1, 3)),data =K_Fold_Data,method = "glm",trControl = ctrl)
mod_fit <- train(output~V1+V2,data =K_Fold_Data,method = "glm",trControl = ctrl)
mod_fit$results
for (i in 1:20){
V= print("V"+ i)
}
for (i in 1:20){
V= "V"+ i
}
V1<-V1
V2<-"V2"
V1+V2
V1<-"V1"
V1+V2
remove(V1)
remove(V2)
mod_fit <- train(output~V1,data =K_Fold_Data,method = "glm",trControl = ctrl)
df[1,]<- mod_fit$results[1,]
View(df)
mod_fit <- train(output~V1+V2,data =K_Fold_Data,method = "glm",trControl = ctrl)
df[2,]<- mod_fit$results[1,]
mod_fit <- train(output~V1+V2+V3,data =K_Fold_Data,method = "glm",trControl = ctrl)
df[3,]<- mod_fit$results[1,]
mod_fit <- train(output~V1+V2+V3+V4,data =K_Fold_Data,method = "glm",trControl = ctrl)
df[4,]<- mod_fit$results[1,]
mod_fit <- train(output~V1+V2+V3+V4+V5,data =K_Fold_Data,method = "glm",trControl = ctrl)
df[5,]<- mod_fit$results[1,]
mod_fit <- train(output~V1+V2+V3+V4+V5+V6,data =K_Fold_Data,method = "glm",trControl = ctrl)
df[6,]<- mod_fit$results[1,]
mod_fit <- train(output~V1+V2+V3+V4+V5+V6+V7,data =K_Fold_Data,method = "glm",trControl = ctrl)
df[7,]<- mod_fit$results[1,]
mod_fit <- train(output~V1+V2+V3+V4+V5+V6+V7+V8,data =K_Fold_Data,method = "glm",trControl = ctrl)
df[8,]<- mod_fit$results[1,]
mod_fit <- train(output~V1+V2+V3+V4+V5+V6+V7+V8+V9,data =K_Fold_Data,method = "glm",trControl = ctrl)
df[9,]<- mod_fit$results[1,]
mod_fit <- train(output~V1+V2+V3+V4+V5+V6+V7+V8+V9+V10,data =K_Fold_Data,method = "glm",trControl = ctrl)
df[10,]<- mod_fit$results[1,]
mod_fit <- train(output~V1+V2+V3+V4+V5+V6+V7+V8+V9+V10+V11,data =K_Fold_Data,method = "glm",trControl = ctrl)
df[11,]<- mod_fit$results[1,]
mod_fit <- train(output~V1+V2+V3+V4+V5+V6+V7+V8+V9+V10+V11+V12,data =K_Fold_Data,method = "glm",trControl = ctrl)
df[12,]<- mod_fit$results[1,]
mod_fit <- train(output~V1+V2+V3+V4+V5+V6+V7+V8+V9+V10+V11+V12+V13,data =K_Fold_Data,method = "glm",trControl = ctrl)
df[13,]<- mod_fit$results[1,]
mod_fit <- train(output~V1+V2+V3+V4+V5+V6+V7+V8+V9+V10+V11+V12+V13+V14,data =K_Fold_Data,method = "glm",trControl = ctrl)
df[14,]<- mod_fit$results[1,]
mod_fit <- train(output~V1+V2+V3+V4+V5+V6+V7+V8+V9+V10+V11+V12+V13+V14+V15,data =K_Fold_Data,method = "glm",trControl = ctrl)
df[15,]<- mod_fit$results[1,]
mod_fit <- train(output~V1+V2+V3+V4+V5+V6+V7+V8+V9+V10+V11+V12+V13+V14+V15+V16,data =K_Fold_Data,method = "glm",trControl = ctrl)
df[16,]<- mod_fit$results[1,]
mod_fit <- train(output~V1+V2+V3+V4+V5+V6+V7+V8+V9+V10+V11+V12+V13+V14+V15+V16+V17,data =K_Fold_Data,method = "glm",trControl = ctrl)
df[17,]<- mod_fit$results[1,]
mod_fit <- train(output~V1+V2+V3+V4+V5+V6+V7+V8+V9+V10+V11+V12+V13+V14+V15+V16+V17+V18,data =K_Fold_Data,method = "glm",trControl = ctrl)
df[18,]<- mod_fit$results[1,]
mod_fit <- train(output~V1+V2+V3+V4+V5+V6+V7+V8+V9+V10+V11+V12+V13+V14+V15+V16+V17+V18+V19,data =K_Fold_Data,method = "glm",trControl = ctrl)
df[19,]<- mod_fit$results[1,]
mod_fit <- train(output~.,data =K_Fold_Data,method = "glm",trControl = ctrl)
df[20,]<- mod_fit$results[1,]
df<-df[-c(21,22)]
df<-df[-c(21,22)]
df<-df[-21]
df<-df[-c(21,22),]
df<-df[,-20]
df[,1]<-1:20
colnames(df)[1]<-number of LSA
colnames(df)[1]<-"number of LSA"
colnames(df)[1]<-"number_of_LSA"
plot(df$number_of_LSA,df$Accuracy,type='1')
plot(df$number_of_LSA,df$Accuracy,type="1")
plot(df$number_of_LSA,df$Accuracy)
plot(df$number_of_LSA,df$Accuracy,type='l')
plot(df$number_of_LSA,df$Accuracy,type='l',xlab = "Number of LSA", ylab="Accuracy")
plot(df$number_of_LSA,df$Accuracy,type='l',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.5,1))
plot(df$number_of_LSA,df$Accuracy,type='l',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,1))
plot(df$number_of_LSA,df$Accuracy,type='l',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85))
plot(df$number_of_LSA,df$Accuracy,type='lo',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85))
plot(df$number_of_LSA,df$Accuracy,type='l', pch="21",xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85))
plot(df$number_of_LSA,df$Accuracy,type='l', pch=21,xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85))
plot(df$number_of_LSA,df$Accuracy,type='l', pch=0 ,xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85))
install.packages("pch")
plot(df$number_of_LSA,df$Accuracy,type='l', pch=0 ,xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85))
plot(df$number_of_LSA,df$Accuracy,type='o',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85) )
plot(df$number_of_LSA,df$Accuracy,type='o',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), pch=2 )
plot(df$number_of_LSA,df$Accuracy,type='o',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), pch=20 )
plot(df$number_of_LSA,df$Accuracy,type='o',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), pch=20, lwd=2 )
plot(df$number_of_LSA,df$Accuracy,type='o',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), pch=20, lwd=1.5 )
plot(df$number_of_LSA,df$Accuracy,type='o',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), pch=20, lwd=2 )
plot(df$number_of_LSA,df$Accuracy,type='o',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), pch=20, lwd=2 )
lines(df$number_of_LSA,df$Spec,col="green")
lines(df$number_of_LSA,df$Sens,col="red")
confusionMatrix(pred_factor, over.b_factor)
plot(df$number_of_LSA,df$Accuracy,type='o',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), lwd=2 )
plot(df$number_of_LSA,df$Accuracy,type='o',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), lwd=2 )
lines(df$number_of_LSA,df$Spec,col="green")
lines(df$number_of_LSA,df$Sens,col="red")
plot(df$number_of_LSA,df$Accuracy,type='o',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), lwd=2 )
plot(df$number_of_LSA,df$Accuracy,type='l',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), lwd=2 )
plot(df$number_of_LSA,df$Accuracy,type='l',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), lwd=2 )
lines(df$number_of_LSA,df$Spec,col="green", lwd=2)
lines(df$number_of_LSA,df$Sens,col="red", lwd=2)
lines(7,100000000000000000000000000000000000000000)
lines(7,10000000)
legend(legend=c("Accuracy","Specificity","Sensitivity"), col=c("black","green","red"))
legend("bottomright",legend=c("Accuracy","Specificity","Sensitivity"), col=c("black","green","red"))
legend("bottomright",legend=c("Accuracy","Specificity","Sensitivity"), col=c("black","green","red"),pch = c(20,20,20))
plot(df$number_of_LSA,df$Accuracy,type='l',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), lwd=2, col="blue" )
lines(df$number_of_LSA,df$Spec,col="green", lwd=2)
lines(df$number_of_LSA,df$Sens,col="red", lwd=2)
legend("bottomright",legend=c("Accuracy","Specificity","Sensitivity"), col=c("black","green","red"),pch = c(20,20,20))
legend("bottomright",legend=c("Accuracy","Specificity","Sensitivity"), col=c("blue","green","red"),pch = c(20,20,20))
legend("bottomright",legend=c("Accuracy","Specificity","Sensitivity"), col=c("blue","green","red"),pch = c(20,20,20), bty="n")
index<- seq(1:20,2)
index<- seq(1,20,2)
index
axis(1, labels=index)
axis(df$number_of_LSA, labels=index)
plot(index,df$Accuracy,type='l',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), lwd=2, col="blue" )
plot(df$number_of_LSA,df$Accuracy,type='l',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), lwd=2, col="blue", xscale.components.default(index) )
plot(df$number_of_LSA,df$Accuracy,type='l',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), lwd=2, col="blue" )
lines(df$number_of_LSA,df$Spec,col="green", lwd=2)
lines(df$number_of_LSA,df$Sens,col="red", lwd=2)
legend("bottomright",legend=c("Accuracy","Specificity","Sensitivity"), col=c("blue","green","red"),pch = c(20,20,20), bty="n")
axis(df$number_of_LSA, labels=index)
axis(1, xaxp=c(1, 20, 19), las=2)
axis(1, xaxp=c(1, 20, 2), las=2)
axis(1, xaxp=c(1, 20), las=2)
axis(1, xaxp=c(1, 20,20), las=2)
plot(df$number_of_LSA,df$Accuracy,type='l',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), lwd=2, col="blue", scale_x_continuous() )
plot(df$number_of_LSA,df$Accuracy,type='l',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), lwd=2, col="blue")
lines(df$number_of_LSA,df$Spec,col="green", lwd=2)
lines(df$number_of_LSA,df$Sens,col="red", lwd=2)
legend("bottomright",legend=c("Accuracy","Specificity","Sensitivity"), col=c("blue","green","red"),pch = c(20,20,20), bty="n")
axis(1, xaxp=c(1, 20,20), las=2)
axis(1, xaxp=c(1, 20,19), las=2)
plot(df$number_of_LSA,df$Accuracy,type='l',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), lwd=2, col="blue")
lines(df$number_of_LSA,df$Spec,col="green", lwd=2)
lines(df$number_of_LSA,df$Sens,col="red", lwd=2)
legend("bottomright",legend=c("Accuracy","Specificity","Sensitivity"), col=c("blue","green","red"),pch = c(20,20,20), bty="n")
axis(1, xaxp=c(1, 20,19), las=2)
axis(1, xaxp=c(1, 20,19), las=3)
plot(df$number_of_LSA,df$Accuracy,type='l',xaxt='n',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), lwd=2, col="blue")
lines(df$number_of_LSA,df$Spec,col="green", lwd=2,xlab = "Number of LSA")
axis(1, xaxp=c(1, 20,19), las=3,xlab = "Number of LSA")
axis(1, xaxp=index, las=3,xlab = "Number of LSA")
lines(df$number_of_LSA,df$Sens,col="red", lwd=2)
legend("bottomright",legend=c("Accuracy","Specificity","Sensitivity"), col=c("blue","green","red"),pch = c(20,20,20), bty="n")
axis(1, xaxp=c(1, 20,), las=3,xlab = "Number of LSA")
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
grid(nx = 1:20, ny = NULL, col = "lightgray", lty = "dotted")
grid(nx = 1, ny = NULL, col = "lightgray", lty = "dotted")
grid(nx = c(1,2,3), ny = NULL, col = "lightgray", lty = "dotted")
abline(h=1:10, col="gray", lty=3)
abline(h=1:10, col="gray", lty=3)
plot(df$number_of_LSA,df$Accuracy,type='l',xaxt='n',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), lwd=2, col="blue")
lines(df$number_of_LSA,df$Spec,col="green", lwd=2,)
lines(df$number_of_LSA,df$Sens,col="red", lwd=2)
legend("bottomright",legend=c("Accuracy","Specificity","Sensitivity"), col=c("blue","green","red"),pch = c(20,20,20), bty="n")
axis(1, xaxp=c(1, 20,), las=3,xlab = "Number of LSA")
axis(1, xaxp=c(1, 20,19), las=3,xlab = "Number of LSA")
abline(h=1:10, col="gray", lty=3)
abline(h=1:10, v=1:10 col="gray", lty=3)
abline(h=1:20, v=1:20 ,col="gray", lty=3)
abline(h=6, col="gray", lty=3)
plot(df$number_of_LSA,df$Accuracy,type='l',xaxt='n',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), lwd=2, col="blue")
lines(df$number_of_LSA,df$Spec,col="green", lwd=2,)
lines(df$number_of_LSA,df$Sens,col="red", lwd=2)
legend("bottomright",legend=c("Accuracy","Specificity","Sensitivity"), col=c("blue","green","red"),pch = c(20,20,20), bty="n")
axis(1, xaxp=c(1, 20,19), las=3,xlab = "Number of LSA")
abline(h=6, col="gray", lty=3)
abline(h=6, V=6 col="gray", lty=3)
abline(h=6, V=6, col="gray", lty=3)
abline(h=6, v=6, col="gray", lty=3)
abline(h=6, v=6, col="gray", lty=3)
abline(h=6, v=6, col="dark gray", lty=3)
abline(h=6, v=6, col="gray47", lty=3)
axis(1, xaxp=c(1, 20,19), las=0,xlab = "Number of LSA")
plot(df$number_of_LSA,df$Accuracy,type='l',xaxt='n',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), lwd=2, col="blue")
lines(df$number_of_LSA,df$Spec,col="green", lwd=2,)
lines(df$number_of_LSA,df$Sens,col="red", lwd=2)
legend("bottomright",legend=c("Accuracy","Specificity","Sensitivity"), col=c("blue","green","red"),pch = c(20,20,20), bty="n")
axis(1, xaxp=c(1, 20,19), las=0,xlab = "Number of LSA")
axis(1, xaxp=c(1, 20,19), las=1,xlab = "Number of LSA")
axis(1, xaxp=c(1, 20,19), las=2,xlab = "Number of LSA")
axis(1, xaxp=c(1, 20,19), las=3,xlab = "Number of LSA")
axis(1, xaxp=c(1, 20,19), las=4,xlab = "Number of LSA")
axis(1, xaxp=c(1, 20,19), las=1,xlab = "Number of LSA")
plot(df$number_of_LSA,df$Accuracy,type='l',xaxt='n',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), lwd=2, col="blue")
lines(df$number_of_LSA,df$Spec,col="green", lwd=2,)
lines(df$number_of_LSA,df$Sens,col="red", lwd=2)
legend("bottomright",legend=c("Accuracy","Specificity","Sensitivity"), col=c("blue","green","red"),pch = c(20,20,20), bty="n")
axis(1, xaxp=c(1, 20,2), las=1,xlab = "Number of LSA")
axis(1, xaxp=c(1, 20,19), las=1,xlab = "Number of LSA")
plot(df$number_of_LSA,df$Accuracy,type='l',xaxt='n',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), lwd=2, col="blue")
lines(df$number_of_LSA,df$Spec,col="green", lwd=2,)
lines(df$number_of_LSA,df$Sens,col="red", lwd=2)
legend("bottomright",legend=c("Accuracy","Specificity","Sensitivity"), col=c("blue","green","red"),pch = c(20,20,20), bty="n")
axis(1, xaxp=c(1, 20,19), las=1,xlab = "Number of LSA")
abline(h=6, v=6, col="gray47", lty=3)
axis(1, xaxp=c(1, 20,19), las=2,xlab = "Number of LSA")
plot(df$number_of_LSA,df$Accuracy,type='l',xaxt='n',xlab = "Number of LSA", ylab="Accuracy",ylim = c(0.6,0.85), lwd=2, col="blue")
lines(df$number_of_LSA,df$Spec,col="green", lwd=2,)
lines(df$number_of_LSA,df$Sens,col="red", lwd=2)
legend("bottomright",legend=c("Accuracy","Specificity","Sensitivity"), col=c("blue","green","red"),pch = c(20,20,20), bty="n")
axis(1, xaxp=c(1, 20,19), las=1,xlab = "Number of LSA")
abline(h=6, v=6, col="gray47", lty=3)
